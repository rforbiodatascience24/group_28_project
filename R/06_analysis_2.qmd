---
title: "06_analysis_2"
format: html
editor: visual
---

```{r}
#| output: false
library("tidyverse")
library("here")
library("broom")
library("cowplot")
library("purrr")
library("dplyr")
library("viridis")
```

## Performing a PCA

```{r}

data <- read_tsv(file = here("data/03_dat_aug.tsv.gz"), 
                 na = "NA", 
                 guess_max = 1001
                 )

```

Pivoting the dataset into a wide format:

```{r}
data_pivot <- data |>
  pivot_wider(
    names_from = ensembl_id,
    values_from = gene_expression
  )

```

Selecting the gene expression data from all the genes, and removing the genes which have a gene expression og 0 for all patients. Then the principal component analysis is performed using prcomp:

```{r}
pca_fit <- data_pivot |> 
  select(starts_with("ENSG")) |> 
  select(where(~ any(. != 0))) |> 
  prcomp(scale = TRUE)

```

The eigenvalues are extracted in a tidy format, and used to make plot axes labels for the PCA plot, which consists of the principal component and the proportion of variance explained for this PC:

```{r}
pca_plot_axes_labels <- pca_fit |>
  tidy("eigenvalues") |>
  mutate(lbl = str_c("PC", PC, ", VE = ", round(percent*100,2), "%")) |> 
  pull("lbl")

```

The PCA plot is produced, stratified on the cancer stage:

```{r}

pca_plot <- pca_fit |> 
  augment(data_pivot) |> 
  filter(abs(.fittedPC1) < 50 & abs(.fittedPC2) < 50) |> 
  ggplot(aes(.fittedPC1, .fittedPC2, color = cancer_stage)) +
  geom_point(size = 1.5) +
  theme_half_open(12) +
  theme(plot.title = element_text(size=27), 
        axis.title.x = element_text(size = 20), 
        axis.title.y = element_text(size = 20)) +
  background_grid() + 
  labs(title = "PCA: Scores Plot of gene expression",
    x = pluck(pca_plot_axes_labels, 1),
    y = pluck(pca_plot_axes_labels, 2), 
    color = "Cancer stage") + 
  scale_colour_viridis_d()

pca_plot

```

Because there is only one big cluster in the PCA we cannot say anything about if the patients are grouped together by the gene expression of certain genes.

We save the plot as a png file:

```{r}
ggsave(filename = "06_pca_plot_2.png",
       plot = pca_plot,
       device = "png",
       path = "../results",
       scale = 1,
       width = 10, 
       height = 7)

```

## Scree plot

Creating a scree plot of the principal components to see how much information is explained by each of the PCs:

```{r}

scree_plot <- pca_fit |>
  tidy("pcs") |> 
  mutate(percent = percent * 100) |> 
  ggplot(aes(x = PC,
             y = percent)) +
  geom_hline(yintercept = 0) +
  geom_col(colour = "black",
           alpha = 0.5, 
           fill = "coral") +
  theme_half_open(12) + 
  background_grid() + 
  theme(panel.grid.minor.x = element_blank(),
        panel.grid.major.x = element_blank(), 
        plot.title = element_text(size=27), 
        axis.title.x = element_text(size = 20), 
        axis.title.y = element_text(size = 20)) +
  labs(title = "Scree Plot", 
       x = "Principal Component", 
       y = "Variance Explained (%)") +
  coord_cartesian(xlim = c(1, 100), ylim = c(0, 20)) 


scree_plot
```

When looking at the Scree plot, we can see that the first two PCs only explain about 22% of the variance, meaning that not a lot of the information is retained in the PCA plot.

Now we save it as a png file:

```{r}
ggsave(filename = "06_scree_plot_2.png",
       plot = scree_plot,
       device = "png",
       path = "../results",
       scale = 1,
       width = 10, 
       height = 7)
```

## Plotting the rotation matrix

```{r}

arrow_style <- arrow(angle = 20, 
                     ends = "first", 
                     type = "closed", 
                     length = grid::unit(8, "pt"))

pca_fit |> 
  tidy(matrix = "rotation") |> 
  pivot_wider(names_from = "PC", 
              names_prefix = "PC", 
              values_from = "value") |> 
  ggplot(aes(PC1, PC2)) +
  geom_segment(xend = 0, 
               yend = 0, 
               arrow = arrow_style) +
  xlim(-0.01, 0.01) + ylim(-0.01, 0.01) +
  coord_fixed()

```

### Grouping and nesting cancer stage and performing PCA on each group

This testing is preformed to see if there is any gene expression clustering within the cancer stages

Nesting data by cancer stage

```{r}
nested_data <- data_pivot |> 
  group_by(cancer_stage) |> 
  nest()
```

Performing PCA on each group within the nested data

```{r}
pca_results <- nested_data |> 
  mutate(
    pca = map(data, ~ {
      .x |> 
        select(starts_with("ENSG")) |> 
        select(where(~ any(. != 0))) |>
        scale() |> 
        prcomp()
    })
  ) |> 
  mutate(
    pca_aug = map2(pca, data, ~augment(.x, data = .y))
  )
```

Selecting the pca data and unnesting

```{r}
pca_plot_data <- pca_results |> 
  select(cancer_stage, pca_aug)  |>
  unnest(pca_aug)
```

Plotting each of the stage PCAs

```{r}
ggplot(pca_plot_data, aes(x = .fittedPC1, y = .fittedPC2, color = vital_status)) +
    geom_point(size = 1.5) +
    facet_wrap(~ cancer_stage, scales = "free") +
    theme_minimal(base_size = 15) +
    labs(
      title = "PCA Results by Cancer Stage",
      x = "Principal Component 1",
      y = "Principal Component 2",
      color = "Vital Status"
    ) +
    theme(
      legend.position = "bottom",
      panel.grid.minor = element_blank()
    )
```

When looking at these plots it is not evedint that any of the stages contain clusters. Though we want to look further into the Stage IIIB

Looking at just one PCA

```{r}
pca_plot_data |> 
  filter(cancer_stage == "Stage IIIB")  |>
  ggplot(aes(x = .fittedPC1, y = .fittedPC2, color = vital_status)) +
    geom_point(size = 1.5) +
    theme_minimal(base_size = 15) +
    labs(
      title = "PCA Results for one stage",
      x = "Principal Component 1",
      y = "Principal Component 2",
      color = "Vital Status"
    ) +
    theme(
      legend.position = "bottom",
      panel.grid.minor = element_blank()
    )
```

There are not any specific clustering when looking at the Stage IIIB PCA with vital status as markers.
