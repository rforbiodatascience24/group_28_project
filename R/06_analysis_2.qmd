---
title: "06_analysis_2"
format: html
editor: visual
---

```{r}
#| output: false
library("tidyverse")
library("here")
library("broom")
library("cowplot")
library("purrr")
library("dplyr")
library("viridis")
```

## Performing a PCA

```{r}

data <- read_tsv(file = here("data/03_dat_aug.tsv.gz"), 
                 na = "NA", 
                 guess_max = 1001
                 )

```

Pivoting the dataset into a wide format:

```{r}
data_pivot <- data |>
  pivot_wider(
    names_from = ensembl_id,
    values_from = gene_expression
  )

```

Selecting the gene expression data from all the genes, and removing the genes which have a gene expression og 0 for all patients. Then the principal component analysis is performed using prcomp:

```{r}
pca_fit <- data_pivot |> 
  select(starts_with("ENSG")) |> 
  select(where(~ any(. != 0))) |> 
  prcomp(scale = TRUE)

```

The eigenvalues are extracted in a tidy format, and used to make plot axes labels for the PCA plot, which consists of the principal component and the proportion of variance explained for this PC:

```{r}
pca_plot_axes_labels <- pca_fit |>
  tidy("eigenvalues") |>
  mutate(lbl = str_c("PC", PC, ", VE = ", round(percent*100,2), "%")) |> 
  pull("lbl")

```

The PCA plot is produced, stratified on the cancer stage:

```{r}

pca_plot <- pca_fit |> 
  augment(data_pivot) |> 
  filter(abs(.fittedPC1) < 50 & abs(.fittedPC2) < 50) |> 
  ggplot(aes(.fittedPC1, .fittedPC2, color = cancer_stage)) +
  geom_point(size = 1.5) +
  theme_half_open(12) + 
  background_grid() + 
  labs(title = "PCA: Scores Plot of gene expression",
    x = pluck(pca_plot_axes_labels, 1),
    y = pluck(pca_plot_axes_labels, 2), 
    color = "Cancer stage") + 
  scale_colour_viridis_d()

pca_plot

```

We save the plot as a png file:

```{r}
ggsave(filename = "05_pca_plot_5.png",
       plot = pca_plot,
       device = "png",
       path = "../results",
       scale = 1,
       width = 10, 
       height = 7)

```

## Scree plot

Creating a scree plot of the principal components:

```{r}

pca_fit |>
  tidy("pcs") |> 
  mutate(percent = percent * 100) |> 
  ggplot(aes(x = PC,
             y = percent)) +
  geom_hline(yintercept = 0) +
  geom_col(colour = "black",
           alpha = 0.5) +
  theme_bw(base_size = 20) +
  theme(panel.grid.minor.x = element_blank(),
        panel.grid.major.x = element_blank()) +
  labs(title = "Scree Plot of PCA", 
       x = "Principal Component", 
       y = "VE percentage (%)") +
  coord_cartesian(xlim = c(1, 100), ylim = c(0, 20))

```

## Plotting the rotation matrix

```{r}

arrow_style <- arrow(angle = 20, 
                     ends = "first", 
                     type = "closed", 
                     length = grid::unit(8, "pt"))

pca_fit |> 
  tidy(matrix = "rotation") |> 
  pivot_wider(names_from = "PC", 
              names_prefix = "PC", 
              values_from = "value") |> 
  ggplot(aes(PC1, PC2)) +
  geom_segment(xend = 0, 
               yend = 0, 
               arrow = arrow_style) +
  xlim(-0.01, 0.01) + ylim(-0.01, 0.01) +
  coord_fixed()

```

Trying something below

```{r}
nested_data <- data_pivot |> 
  group_by(cancer_stage) |> 
  nest()
```

```{r}
pca_results <- nested_data |> 
  mutate(pca = map(data, ~ {
    # Select gene expression columns (assuming they start with "ENSG") and scale them
    pca_fit <- .x |> 
      select(starts_with("ENSG")) |> 
      select(where(~ any(. != 0))) |> 
      scale() |> 
      prcomp()
    
    # Return the PCA results for each group
    pca_fit
  }))
```

```{r}

pca_components <- pca_results |> 
  mutate(pca_data = map(pca, ~ as.data.frame(.x$x))) |> 
  unnest(cols = pca_data)

```

```{r}

ggplot(pca_components, aes(x = PC1, y = PC2, color = cancer_stage)) +
  geom_point(size = 2) +
  labs(title = "PCA of Gene Expression by Cancer Stage") +
  theme_minimal()

```

```{r}
# Step 1: Filter for a specific cancer stage (e.g., "Stage I")
specific_cancer_stage <- data_pivot %>%
  filter(cancer_stage == "Stage I") %>%
  select(starts_with("ENSG"), vital_status)  # Select gene expression and vital status

# Step 2: Perform PCA on the gene expression data (only select numeric gene expression columns)
pca_fit <- prcomp(
  select(specific_cancer_stage, starts_with("ENSG"), where(~ any(.x != 0)))
  , scale = TRUE)

# Step 3: Prepare the PCA results for plotting
pca_results <- as.data.frame(pca_fit$x)  # Get the PCA components
pca_results$vital_status <- specific_cancer_stage$vital_status  # Add vital status

# Step 4: Plot PCA, colored by vital status
ggplot(pca_results, aes(x = PC1, y = PC2, color = vital_status)) +
  geom_point(size = 2) +
  labs(title = "PCA of Gene Expression for Stage I (Colored by Vital Status)",
       x = "Principal Component 1", y = "Principal Component 2") +
  theme_minimal() +
  scale_color_manual(values = c("Alive" = "red", "Dead" = "blue", "NA" = "gray")) 
```
